name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
        
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -v ./...
      
    - name: Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        
    - name: Build binary
      run: go build -v -o redactctl ./cmd/redactctl

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
        
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Build binaries
      run: |
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o redactctl-linux-amd64 ./cmd/redactctl
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o redactctl-linux-arm64 ./cmd/redactctl
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o redactctl-darwin-amd64 ./cmd/redactctl
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o redactctl-darwin-arm64 ./cmd/redactctl
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o redactctl-windows-amd64.exe ./cmd/redactctl
        
    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          # Try to extract version-specific changelog
          awk '/^## \[?'${GITHUB_REF#refs/tags/v}'\]?/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md > current_changelog.md || echo "No specific changelog found"
        fi
        
        # If no changelog or empty, create a basic one
        if [ ! -s current_changelog.md ]; then
          echo "## What's Changed" > current_changelog.md
          echo "" >> current_changelog.md
          echo "* Enhanced redaction architecture with policy and multi-tenant support" >> current_changelog.md
          echo "* Extensible provider interfaces for future LLM integration" >> current_changelog.md
          echo "* Comprehensive redaction modes (replace, mask, remove, tokenize, hash, encrypt)" >> current_changelog.md
          echo "* Policy-aware and tenant-aware redaction engines" >> current_changelog.md
          echo "* Factory pattern for easy provider instantiation" >> current_changelog.md
          echo "" >> current_changelog.md
          echo "**Full Changelog**: https://github.com/censgate/redact/commits/${{ steps.get_version.outputs.VERSION }}" >> current_changelog.md
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body_path: current_changelog.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
        files: |
          redactctl-linux-amd64
          redactctl-linux-arm64
          redactctl-darwin-amd64
          redactctl-darwin-arm64
          redactctl-windows-amd64.exe
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-module:
    name: Publish Go Module
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
        
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Validate module
      run: |
        go mod tidy
        go mod verify
        
    - name: Publish to Go proxy
      run: |
        # The Go proxy will automatically pick up the tagged version
        # We just need to ensure the module is properly structured
        echo "Module will be available at: https://pkg.go.dev/github.com/censgate/redact@${{ steps.get_version.outputs.VERSION }}"
        
        # Test that the module can be downloaded
        go list -m github.com/censgate/redact@${{ steps.get_version.outputs.VERSION }} || echo "Module not yet available in proxy (this is normal for new releases)"
